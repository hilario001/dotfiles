" TODO compile vim with clipboard feature
" TODO learn vim script

let mapleader=" "
let g:netrw_banner=0
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_localcopydircmd = 'cp -r'

" Options {{{
set path+=**
set nostartofline
set hidden
set shortmess+=I
set incsearch
set termguicolors
set background=dark
set tabstop=4 softtabstop=4 shiftwidth=4
set expandtab
set smartindent autoindent
set noruler noshowmode showcmd
set scrolloff=3
set tw=80
"set rnu nu
"set foldmethod=indent
"set foldlevel=1
"set foldclose=all
"set undofile
"set undodir=~/.cache/vim/undo
"set undolevels=1000 "set undoreload=3000
" }}}

" Yank, paste {{{
nnoremap <leader>Y mmggVG:w ! xclip -sel clip<cr><cr>`m
nnoremap <leader>p :.!xclip -o -selection clip<cr>
nnoremap <leader>y Vk<cr>:w ! xclip -sel clip<cr><cr>
vnoremap <leader>p "0p
vnoremap <leader>y :w ! xclip -sel clip<cr><cr>
vnoremap <leader>p "_dP
" }}}

" Quickfix
nnoremap <leader><c-p> :copen<cr>
nnoremap <silent><c-k> :cnext<cr>
nnoremap <silent><c-j> :cprev<cr>

" Search and replace
nnoremap c* :%s/\<<c-r><c-w>\>//g<left><left>
nnoremap <leader>* :g/\<<c-r><c-w>\>/#<cr>

" File navigation
" nnoremap <leader>fd :20vs <c-r>=expand('%:.:h') .. '/'<cr><cr>

" Buffer navigation
nnoremap <leader>a <c-^>
nnoremap <leader>lb :ls<cr>:buffer 
nnoremap <silent><leader>cb :bdelete<cr> 
nnoremap <silent><c-n> :bnext<cr>
nnoremap <silent><c-p> :bprev<cr>

" Default keybinds remaps
nnoremap ' `
nnoremap '' ``
nnoremap ` '
nnoremap `` ''
nnoremap <silent> { :execute "keepjumps norm! " . v:count1 . "{"<cr>
nnoremap <silent> } :execute "keepjumps norm! " . v:count1 . "}"<cr>
nnoremap <space> <nop>
nnoremap Q <nop>

" Dotfiles marks
nnoremap 'V :edit ~/.config/vim/vimrc<cr>
nnoremap 'Z :edit ~/.config/zsh/.zshrc<cr>
nnoremap 'I :edit ~/.config/i3/config<cr>
nnoremap 'A :edit ~/.config/alacritty/alacritty.toml<cr>
nnoremap 'C :edit ~/.config/vim/colors/cs.vim<cr>
nnoremap 'T :edit ~/.todo.txt<cr> 

" Miscellaneous {{{
nnoremap <silent><leader><cr> :so %<cr>

colorscheme rosepine
"colorscheme xoria256
"colorscheme cs
"colorscheme murmur
syntax enable
filetype plugin on

autocmd BufRead vimrc setlocal foldmethod=marker
" }}}

" C programming
augroup C
        autocmd!
        autocmd FileType c setlocal cindent tabstop=8 softtabstop=8 shiftwidth=8
        \| set makeprg=gcc\ -o\ main\ %\ -Wall\ -Werror\ -lm
        \| nnoremap <buffer><leader>m :w<cr>:!clear<cr>:make<cr>
        \| nnoremap <buffer><leader>x :w<cr>:make<cr>:!clear;./main<cr>
        \| nnoremap 'b :e build.sh<cr>
augroup END

augroup todo
        autocmd!
        autocmd BufRead .todo.txt execute 'balt ~/acad/activities.txt'
        \| nnoremap <silent><buffer><cr> 0viws<c-r>=strftime("%r")<cr><esc>ddGp<c-o>0
        \| nnoremap <buffer>o o????    
        \| nnoremap <buffer>O O????    
augroup END

" Automatic file marks from:
" https://gist.github.com/romainl/3e0cb99343c72d04e9bc10f6d76ebbef
" that also credited to circa 2011-12
augroup autoFileMarks
        autocmd!
        autocmd BufLeave *.css,*.scss   normal! mC
        autocmd BufLeave *.html         normal! mH
        autocmd BufLeave *.js,*.ts      normal! mJ
        autocmd BufLeave *.php          normal! mP
augroup END

augroup skeletons
        autocmd!
        autocmd BufNewFile *.html       0r ~/.config/vim/skeletons/index.html | normal! 4jf<;:bd #<cr>
        "autocmd BufNewFile *.php        0r ~/.config/vim/skeletons/index.php | normal! j
        "autocmd BufNewFile *.java       0r ~/programming/java/skeleton.java
augroup END

" Config toggles
let s:nu = 0
function! ToggleNumber()
        if s:nu == 0
                let s:nu = 1
                set rnu nu
        else
                let s:nu = 0
                set nornu nonu
        endif
endfunction

let s:cs = 0
function! ToggleColorscheme()
        if s:cs == 1
                let s:cs = 0
                colorscheme rosepine
        else
                let s:cs = 1
                colorscheme cs
        endif
endfunction

nnoremap <silent><leader>tn :call ToggleNumber()<cr>
nnoremap <silent><leader>ts :call ToggleColorscheme()<cr>

" List-commands maps
nnoremap <silent><leader>ld :20Lex <c-r>=expand('%:.:h') .. '/'<cr><cr>
" nnoremap <leader>lc :set nomore<cr>:changes<cr>:norm! G<cr>:norm! g;<s-left>
" nnoremap <leader>lj :set nomore<cr>:ju<cr>:norm! <c-o><s-left>
" nnoremap <leader>lu :undol<cr>:u 
" nnoremap <leader>lo :set more<cr>:old<cr>e #<

" Modified version from Romainl's gist
function! CR()
        let cmdline = getcmdline()
        if cmdline =~ "\v\C/(#|nu)$"
                return "\<CR>:"
        elseif cmdline =~? "^h "
                return "\<CR>:only\<CR>\<c-l>"
        elseif cmdline =~ "^ls$"
                return "\<CR>:buffer "
        elseif cmdline =~ "^old$"
                return "\<CR>e #<"
        elseif cmdline =~ "^reg$"
                return "\<CR>:norm \""
        else
                return "\<CR>"
        endif
endfunction

cnoremap <expr> <cr> CR()
inoremap <cr> <c-]><c-g>u<cr>

function! NetrwMapping()
        nmap <buffer> <leader>m mf
        nmap <buffer> <leader>cp <c-w>z
        nmap <buffer><silent> <leader><cr> <cr>:Lex<cr>
        nmap <buffer> J jp
        nmap <buffer> K kp
        nmap <buffer> _ <cr>
endfunction

autocmd Filetype php inoremap <buffer> > ><esc>bi<<esc>yf>f>pF<a/<esc>cit
autocmd Filetype html inoremap <buffer> > ><esc>bi<<esc>yf>f>pF<a/<esc>cit
autocmd Filetype netrw call NetrwMapping()
autocmd BufReadPost * normal! `"
autocmd Filetype css inoremap <buffer> { {<cr><cr>}<esc>ki<c-t>

" Git mappings
nnoremap <leader>ga :!git add %; git commit %<cr>

"nnoremap <leader>gf :e <cfile><cr>
nnoremap <silent><leader>fc :!touch <c-r><c-p><cr><cr>
" REMINDERS:
" gd - go to local declaration of variable under the cursor
" gD - go to global declaration of variable under the cursor
" gi - go to last inserted text and enter insert mode
" gg=G fix indentation of the file based on options related to indent
"
" use w, W, b, B, e, E, ge, gE instead of spamming h,j,k,l
"
" # - find next occurence of word under cursor backwards
" * - find next occurence of word under cursor forward
"
" Move cursor relative to visible area of window
" H - high
" M - mid
" L - low
"
" position the screen with the cursor at:
" zt - top
" zb - bottom
"
" gggqG - wrap all lines in the file longer than set textwidth into multiple lines
" gg=G - fix file indentation
"
"let s:hidden_all = 0
"function! ToggleHiddenAll()
"    if s:hidden_all  == 0
"        let s:hidden_all = 1
"        set noshowmode
"        set noruler
"        set laststatus=0
"        set noshowcmd
"    else
"        let s:hidden_all = 0
"        set showmode
"        set ruler
"        set laststatus=2
"        set showcmd
"    endif
"endfunction
"
"nnoremap <S-h> :call ToggleHiddenAll()<cr>
